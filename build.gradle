plugins {
    id 'java'
    id "io.qameta.allure" version "2.9.6"
}

repositories {
    mavenCentral()
}

def allureVersion = "2.17.3",
    selenideVersion = '6.3.5',
    junitVersion = "5.8.2",
    slf4jVersion = '1.7.36'


allure {
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
    report {
        version.set(allureVersion)
    }
}

dependencies {
    testImplementation(
            'org.aspectj:aspectjweaver:1.9.9',
            "org.aeonbits.owner:owner:1.0.12",
            'org.assertj:assertj-core:3.22.0',
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testRuntimeOnly(
            "org.slf4j:slf4j-simple:$slf4jVersion", // не обновлять 1.7.32
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties())
    systemProperty 'allure.link.tms.pattern', 'https://jira.atlassian.com/browse/{}'
    systemProperty 'allure.link.issue.pattern', 'https://jira.atlassian.com/browse/{}'

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

// для работы с тэгами
task properties_test(type: Test) {
    useJUnitPlatform {
        includeTags "properties"
    }
}

task demowebshop(type: Test) {
    useJUnitPlatform {
        includeTags 'demowebshop'
    }
}

task smoke_test(type: Test) {
    useJUnitPlatform {
        includeTags "smoke"
    }
}